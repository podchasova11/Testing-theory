#–ó–∞–¥–∞—á–∏: 
#1) –î–∞–Ω –º–∞—Å—Å–∏–≤ A, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —á–∏—Å–ª–∞–º–∏ –æ—Ç 0 –¥–æ n - 1 (—á–∏—Å–ª–∞ –≤—Ä–∞–∑–±—Ä–æ—Å). –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç, 
#–∏ –µ—Å—Ç—å –æ–¥–Ω–æ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∞–¥–æ –µ–≥–æ –Ω–∞–π—Ç–∏. // const array = [3, 6, 1, 4, 2, 5, 7, 8, 10, 11] !!! - –ó–î–ï–°–¨ –ù–ï–¢ –ó–ù–ê–ß–ï–ù–ò–Ø "0"

#–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ –º–∞—Å—Å–∏–≤–µ –æ—Ç 0 –¥–æ n - 1, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ 
#—Å–≤–æ–π—Å—Ç–≤–æ —Å—É–º–º—ã –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏. –°—É–º–º–∞ –≤—Å–µ—Ö —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ n - 1 –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
#—Å–ª–æ–∂–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–∏—Ç—å–∏—Ö –Ω–∞ –¥–≤–∞ –∏ —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ N (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª)

#ùëÜ=((A_1 + A_n)/2)√óN
 
#–ú—ã –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ —Å—É–º–º—É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –∏ –≤—ã—á–µ—Å—Ç—å –µ—ë –∏–∑ —Å—É–º–º—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–µ —á–∏—Å–ª–æ.

def find_missing_number(arr):
    n = len(arr) + 1  # –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ 1 –±–æ–ª—å—à–µ –∏–∑-–∑–∞ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
    total_sum = n * (n - 1) // 2  # –°—É–º–º–∞ —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ n-1
    actual_sum = sum(arr)  # –°—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ
    return total_sum - actual_sum  # –ü–æ—Ç–µ—Ä—è–Ω–Ω–æ–µ —á–∏—Å–ª–æ

# –ü—Ä–∏–º–µ—Ä
array = [0, 3, 6, 1, 4, 2, 5, 7, 8, 10, 11] # –¥–æ–±–∞–≤–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ "0"
missing_number = find_missing_number(array)
print(f"–ü–æ—Ç–µ—Ä—è–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {missing_number}") # —ç—Ç–æ —á–∏—Å–ª–æ 9
#______________________________________________________________________________________________________________________



# 2) 
# –î–∞–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å –ø—Ä–æ—Å—Ç–µ–π—à–∏–º–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ - —Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ, –¥–µ–ª–µ–Ω–∏–µ.
# –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–π, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –ø–æ–∫—Ä–æ–π—Ç–µ –µ–≥–æ unit-—Ç–µ—Å—Ç–∞–º–∏.
# (p.s —Å—Ä–∞–∑—É –ø–æ–¥—É–º–∞—Ç—å –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∏–ø–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–ª 0 –≤ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–µ–ª–µ–Ω–∏—è –≤ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å)

# –î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å –ø—Ä–æ—Å—Ç–µ–π—à–∏–º–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –º—ã –≤—ã–±–µ—Ä–µ–º
# —Ç–∏–ø—ã –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–∞–∫ float –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∏—Å–ª–∞–º–∏ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π. 

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:

#- –°–ª–æ–∂–µ–Ω–∏–µ
#- –í—ã—á–∏—Ç–∞–Ω–∏–µ
#- –£–º–Ω–æ–∂–µ–Ω–∏–µ
#- –î–µ–ª–µ–Ω–∏–µ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å)
# –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞–¥ —á–∏—Å–ª–∞–º–∏, –∏ –µ—Å–ª–∏ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 0 –æ–±–Ω–∞—Ä—É–∂–∏—Ç—Å—è, –≤—ã–±—Ä–æ—Å–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.

# –í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: 

class Calculator:
    @staticmethod
    def add(a: float, b: float) -> float: #–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ float
        Calculator._validate_numbers(a, b)
        return a + b

    @staticmethod
    def subtract(a: float, b: float) -> float:
        Calculator._validate_numbers(a, b)
        return a - b

    @staticmethod
    def multiply(a: float, b: float) -> float:
        Calculator._validate_numbers(a, b)
        return a * b

    @staticmethod
    def divide(a: float, b: float) -> float:
        Calculator._validate_numbers(a, b)
        if b == 0:
            raise ValueError("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!")
        return a / b

    @staticmethod
    def _validate_numbers(a, b):
        if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):
            raise TypeError("–û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")

#____________________________________________________________________________________________________
#Unit-—Ç–µ—Å—Ç—ã
#–î–∞–ª–µ–µ –Ω–∞–ø–∏—à–µ–º unit-—Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:

import unittest


class TestCalculator(unittest.TestCase):
    def test_add(self):
        self.assertEqual(Calculator.add(2, 3), 5)
        self.assertEqual(Calculator.add(-2, 3), 1)
        self.assertEqual(Calculator.add(0, 0), 0)
        self.assertEqual(Calculator.add(2.5, 3.5), 6.0)

    def test_subtract(self):
        self.assertEqual(Calculator.subtract(5, 3), 2)
        self.assertEqual(Calculator.subtract(2, 3), -1)
        self.assertEqual(Calculator.subtract(0, 0), 0)
        self.assertEqual(Calculator.subtract(5.5, 1.5), 4.0)

    def test_multiply(self):
        self.assertEqual(Calculator.multiply(5, 3), 15)
        self.assertEqual(Calculator.multiply(-5, 3), -15)
        self.assertEqual(Calculator.multiply(0, 5), 0)
        self.assertEqual(Calculator.multiply(2.5, 4), 10.0)

    def test_divide(self):
        self.assertEqual(Calculator.divide(6, 3), 2)
        self.assertEqual(Calculator.divide(5, 2), 2.5)
        self.assertEqual(Calculator.divide(-6, 3), -2)
        self.assertRaises(ValueError, Calculator.divide, 5, 0)

    def test_invalid_arguments(self):
        self.assertRaises(TypeError, Calculator.add, "2", 3)
        self.assertRaises(TypeError, Calculator.subtract, 2, "3")
        self.assertRaises(TypeError, Calculator.multiply, "a", "b")
        self.assertRaises(TypeError, Calculator.divide, 5, "0")

if __name__ == '__main__':
    unittest.main()

